{
	"info": {
		"_postman_id": "30c59569-2702-44fd-b03f-546d0d28bdaf",
		"name": "gotCaked",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "main",
			"item": [
				{
					"name": "Main Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Response\", function () {\r",
									"    pm.expect(data.message).equal(\"Welome to our backend!\");\r",
									"    pm.expect(data.status).equal(\"/status\");\r",
									"    pm.expect(data.version).to.exist;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiURL}}",
							"host": [
								"{{apiURL}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "status",
			"item": [
				{
					"name": "GET  - Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Response\", function () {\r",
									"    pm.expect(data.version).to.exist;\r",
									"    pm.expect(data.userCount).to.exist;\r",
									"    pm.expect(data.recipeCount).to.exist;\r",
									"    pm.expect(data.commentsCount).to.exist;\r",
									"    pm.expect(data.tagsCount).to.exist;\r",
									"    pm.expect(data.categoriesCount).to.exist;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiURL}}/status",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"status"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "user",
			"item": [
				{
					"name": "Create  User - Normal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 201\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Getting User-ID\", function () {\r",
									"    pm.globals.set(\"userID\", data.id);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Correct E-Mail\", function () {\r",
									"    pm.expect(data.email).to.equal(pm.globals.get(\"randomUser\") + \"@gotcaked.eu\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userName = pm.variables.replaceIn(\"{{$randomUserName}}\")\r",
									"let userPassword = pm.variables.replaceIn(\"{{$randomPassword}}\")\r",
									"pm.globals.set(\"randomUser\", userName);\r",
									"pm.globals.set(\"randomPassword\", userPassword);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"{{randomUser}}@gotcaked.eu\",\r\n    \"name\": \"{{randomUser}}\",\r\n    \"description\": \"Lelelelel\",\r\n    \"password\":\"{{randomPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiURL}}/users/",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User - Which Exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 409\", function() {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Message\", function () {\r",
									"    pm.expect(data.status).equal(\"error\");\r",
									"    pm.expect(data.message).to.equal(\"User already exists\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"{{randomUser}}@gotcaked.eu\",\r\n    \"name\": \"{{randomUser}}\",\r\n    \"password\":\"{{randomPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiURL}}/users/",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "auth",
			"item": [
				{
					"name": "Login - Normal User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Recieving JWT Token\", function () {\r",
									"    pm.globals.set(\"jwtToken\", data.token);\r",
									"    pm.expect(data.token).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Recieving Correct JWT Token\", function () {\r",
									"    let decodedData=jwt_decode(data.token);\r",
									"    pm.expect(decodedData.email).to.equal(pm.globals.get(\"randomUser\")+\"@gotcaked.eu\");\r",
									"    pm.expect(decodedData.id).to.equal(pm.globals.get(\"userID\"));\r",
									"    pm.globals.set(\"userID\", decodedData.id);\r",
									"    \r",
									"});\r",
									"\r",
									"pm.test(\"Correct Message\", function () {\r",
									"    pm.expect(data.status).to.equal(\"success\");\r",
									"});\r",
									"\r",
									"\r",
									"//Decode JWT to get ID\r",
									"function jwt_decode(input) {\r",
									"    var parts = input.split('.'); // header, payload, signature\r",
									"    return JSON.parse(atob(parts[1]));\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"{{randomUser}}@gotcaked.eu\",\r\n    \"password\":\"{{randomPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiURL}}/auth/login",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Wrong PW",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 401\", function() {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Message\", function () {\r",
									"    pm.expect(data.status).equal(\"error\");\r",
									"    pm.expect(data.message).equal(\"Password donÂ´t match\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"{{randomUser}}@gotcaked.eu\",\r\n    \"password\":\"{{randomPassword}} + 1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiURL}}/auth/login",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Not Existing User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 404\", function() {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Message\", function () {    \r",
									"    pm.expect(data.status).equal(\"error\");\r",
									"    pm.expect(data.message).equal(\"User does not exist\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"{{randomUser}}@getcaked.eu\",\r\n    \"password\":\"{{randomPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiURL}}/auth/login",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logut - Valid JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 400\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Message\", function () {\r",
									"    pm.expect(data.status).equal(\"error\");\r",
									"    pm.expect(data.message).equal(\"No JWT Key\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiURL}}/auth/logout",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logut - No JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Message\", function () {\r",
									"    pm.expect(data.status).equal(\"success\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "jwt",
								"value": "{{jwtToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiURL}}/auth/logout",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "recipe",
			"item": []
		},
		{
			"name": "category",
			"item": []
		},
		{
			"name": "tag",
			"item": []
		}
	]
}